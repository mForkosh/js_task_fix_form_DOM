{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAiB,SAAS,gBAAgB,CAAC,W,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAE5C,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,I,EAAK,EAAA,EAAe,CAAA,CAAA,OAAA,QAAA,CAAA,GAAf,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA2B,CAA3B,IAAM,EAAN,EAAA,KAAA,CACG,EAAQ,SAAS,aAAa,CAAC,SAErC,EAAM,YAAY,CAAC,cAAe,EAAmB,EAAM,IAAI,GAC/D,EAAM,MAAM,CAAC,GACb,EAAM,SAAS,CAAC,GAAG,CAAC,eACpB,EAAM,YAAY,CAAC,MAAO,EAAM,EAAE,EAClC,EAAM,WAAW,CAAG,EAAmB,EAAM,IAAI,CACnD,C,C,M,E,CARK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAUL,SAAS,EAAmB,CAAU,EACpC,IAAM,EAAY,CAAU,CAAC,EAAE,CAAC,WAAW,GAAK,EAAW,KAAK,CAAC,GAC3D,EAAQ,EAAU,WAAW,GAAG,OAAO,CAAC,eAE9C,AAAI,AAAU,KAAV,EACK,EAIP,EAAU,KAAK,CAAC,EAAG,GAAS,IAAM,EAAU,KAAK,CAAC,EAGtD","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["'use strict';\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar formChilds = _to_consumable_array(document.querySelectorAll('input'));\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = formChilds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var input = _step.value;\n        var label = document.createElement('label');\n        input.setAttribute('placeholder', formatedStringName(input.name));\n        input.before(label);\n        label.classList.add('field-label');\n        label.setAttribute('for', input.id);\n        label.textContent = formatedStringName(input.name);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nfunction formatedStringName(inpitSting) {\n    var titleWord = inpitSting[0].toUpperCase() + inpitSting.slice(1);\n    var index = titleWord.toLowerCase().indexOf('name');\n    if (index === -1) return titleWord;\n    var stringWithSpace = titleWord.slice(0, index) + ' ' + titleWord.slice(index);\n    return stringWithSpace;\n}\n\n//# sourceMappingURL=index.f434e17c.js.map\n","'use strict';\n\nconst formChilds = [...document.querySelectorAll('input')];\n\nfor (const input of formChilds) {\n  const label = document.createElement('label');\n\n  input.setAttribute('placeholder', formatedStringName(input.name));\n  input.before(label);\n  label.classList.add('field-label');\n  label.setAttribute('for', input.id);\n  label.textContent = formatedStringName(input.name);\n}\n\nfunction formatedStringName(inpitSting) {\n  const titleWord = inpitSting[0].toUpperCase() + inpitSting.slice(1);\n  const index = titleWord.toLowerCase().indexOf('name');\n\n  if (index === -1) {\n    return titleWord;\n  }\n\n  const stringWithSpace =\n    titleWord.slice(0, index) + ' ' + titleWord.slice(index);\n\n  return stringWithSpace;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","formChilds","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","input","value","label","createElement","setAttribute","formatedStringName","before","classList","add","id","textContent","err","return","inpitSting","titleWord","toUpperCase","index","toLowerCase","indexOf"],"version":3,"file":"index.f434e17c.js.map"}